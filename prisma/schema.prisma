generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AccountAdmin {
  username String @id
  password String
}

model Homeowners {
  homeOwnerId               Int       @id @default(autoincrement())
  name                      String
  phone                     String?   @map("phone") // note: 'SDT'
  username                  String
  password                  String
  metaAccessToken           String?
  metaAccessTokenExpireDate DateTime?
  fullname                  String?   @map("fullname") // note: 'Tên chủ nhà'
  cittizenId                String?   @map("cittizenId") // note: 'CCCD'
  active                    Boolean   @default(true) // note: 'Ngừng sử dụng dịch vụ'
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  homes                     Homes[]
}

model Homes {
  homeId          Int               @id @default(autoincrement())
  homeOwnerId     Int?
  address         String
  fullname        String?           @map("fullname") // note: 'Tên chủ nhà'
  active          Boolean           @default(false) // note: 'Đang trống'
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  homeowner       Homeowners?        @relation(fields: [homeOwnerId], references: [homeOwnerId])
  homeContracts   HomeContract[]
  ServiceContract ServiceContract[]
  InvoicesPayment InvoicesPayment[]
}

model Guests {
  guestId        Int                @id @default(autoincrement())
  name           String
  phone          String?            @map("phone") // Chú ý: 'SDT'
  fullname       String?            @map("fullname") // Chú ý: 'Tên khách thuê'
  citizenId      String?            @map("citizenId") // Chú ý: 'CCCD'
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  homeContracts  HomeContract[]
  serviceContracts ServiceContract[]
}

model HomeContract {
  homeContractsId Int               @id @default(autoincrement())
  home            Homes?             @relation(fields: [homeId], references: [homeId])
  homeId          Int?
  guest           Guests?            @relation(fields: [guestId], references: [guestId])
  guestId         Int?               // Đây là trường guestId thực sự trong mô hình HomeContract
  datePayment     DateTime          @map("datePayment") // Chú ý: 'Hạn thanh toán'
  total           Float?
  statusPayment   Boolean           @default(false) // Chú ý: 'Chưa thanh toán'
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  invoicesPayment InvoicesPayment[]
}

model ServiceContract {
  serviceContractId Int               @id
  serviceId         Int?
  service           Service?           @relation(fields: [serviceId], references: [serviceId])
  home              Homes?             @relation(fields: [homeId], references: [homeId])
  homeId            Int?
  guest            Guests?            @relation(fields: [guestId], references: [guestId])
  guestId          Int?
  signDate          DateTime?
  payCycle          Int // note: 'Chu kỳ thanh toán'
  duration          Int // note: 'Thời hạn hợp đồng'
  unitCost          Float // note: 'unitCost '
  statusContract    Boolean           @default(false) // note: 'Chưa thanh toán'
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  InvoicesPayment   InvoicesPayment[]
}

model InvoicesPayment {
  serviceInvoiceId  Int             @id @default(autoincrement())
  serviceContract   ServiceContract? @relation(fields: [serviceContractId], references: [serviceContractId])
  serviceContractId Int?
  homeContract      HomeContract?    @relation(fields: [homeContractId], references: [homeContractsId])
  homeContractId    Int?
  home              Homes?           @relation(fields: [homeId], references: [homeId])
  homeId            Int?
  type              String
  datePaymentRemind DateTime        @map("datePaymentRemind") // note: 'Ngày nhắc nhở dự kiến'
  datePaymentExpect DateTime        @map("datePaymentExpect") // note: 'Ngày thanh toán dự kiến'
  datePaymentReal   DateTime        @map("datePaymentReal") // note: 'Ngày thanh toán thực tế'
  dateStart         DateTime        @map("dateStart") // note: 'Ngày bắt đầu đợt thanh toán'
  dateEnd           DateTime        @map("dateEnd") // note: 'Ngày kết thúc đợt thanh toán'
  total             Float?
  limit             Float?
  statusPayment     Boolean         @default(false) // note: 'Chưa thanh toán'
  receiverId        Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  receiver          Receiver?        @relation(fields: [receiverId], references: [receiverId])
}

model Receiver {
  receiverId      Int               @id　@default(autoincrement())
  name            String
  phone           String? // note: 'SDT'
  email           String? // note: 'SDT'
  taxcode         String? // note: 'SDT'
  TenTK           String? // note: 'SDT'
  STK             String? // note: 'SDT'
  Nganhang        String? // note: 'SDT'
  type            String? // note: 'Loại cty môi giới như điện, nước,...'
  note            String? // note: 'SDT'
  InvoicesPayment InvoicesPayment[]
}

model Service {
  serviceId       Int               @id @default(autoincrement())
  name            String
  unit            String? // note: 'Đơn vị tính'
  description     String? // note: 'Mô tả dịch vụ'
  ServiceContract ServiceContract[]
}
