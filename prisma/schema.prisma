generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model guests {
  guestId          Int                @id @default(autoincrement())
  phone            String?
  fullname         String
  citizenId        String?
  createdAt        DateTime
  updatedAt        DateTime
  homecontracts    homeContracts[]
  servicecontracts serviceContracts[]
  homeInvoice      homeInvoice[]
}

model homeContracts {
  homeContractsId Int           @id @default(autoincrement())
  homeId          Int
  guestId         Int
  dateRent        DateTime
  duration        Int
  rental          Float?
  cyclePayment    Int
  createdAt       DateTime
  updatedAt       DateTime
  homeInvoices    homeInvoice[]
  guests          guests        @relation(fields: [guestId], references: [guestId], map: "HomeContracts_guestsId_fkey")
  homes           homes         @relation(fields: [homeId], references: [homeId], map: "HomeContracts_homeId_fkey")

  @@index([guestId], map: "HomeContracts_guestId_fkey")
  @@index([homeId], map: "HomeContracts_homeId_fkey")
}

model homeInvoice {
  homeInvoiceId                Int            @id @default(autoincrement())
  homeId                       Int
  guestId                      Int
  datePayment                  DateTime
  totalPayment                 Float?
  cyclePayment                 Int
  statusPayment                Boolean        @default(false)
  createdAt                    DateTime
  updatedAt                    DateTime
  guests                       guests         @relation(fields: [guestId], references: [guestId], map: "HomeInvoices_guestsId_fkey")
  homes                        homes          @relation(fields: [homeId], references: [homeId], map: "HomeInvoices_homeId_fkey")
  homeContracts                homeContracts? @relation(fields: [homeContractsHomeContractsId], references: [homeContractsId])
  homeContractsHomeContractsId Int?

  @@index([guestId], map: "HomeInvoices_guestsId_fkey")
  @@index([homeId], map: "HomeInvoices_homeId_fkey")
}

model homeowners {
  homeOwnerId               Int       @id @default(autoincrement())
  phone                     String?
  metaAccessToken           String?
  metaAccessTokenExpireDate DateTime?
  fullName                  String
  citizenId                 String?
  active                    Boolean   @default(true)
  createdAt                 DateTime
  updatedAt                 DateTime
  homes                     homes[]   @relation("homeownerstohomes")
}

model homes {
  homeId           Int                @id @default(autoincrement())
  homeOwnerId      Int
  address          String
  fullName         String?
  active           Boolean            @default(false)
  createdAt        DateTime
  updatedAt        DateTime
  homecontracts    homeContracts[]
  servicecontracts serviceContracts[]
  homeowners       homeowners[]       @relation("homeownerstohomes")
  homeInvoice      homeInvoice[]
}

model serviceContracts {
  serviceContractsId Int       @id @default(autoincrement())
  homeId             Int
  guestId            Int
  signDate           DateTime?
  payCycle           Int
  duration           Int
  unitCost           Float
  statusPayment      Boolean   @default(false)
  createdAt          DateTime
  updatedAt          DateTime
  guests             guests    @relation(fields: [guestId], references: [guestId], map: "ServiceContracts_guestsId_fkey")
  homes              homes     @relation(fields: [homeId], references: [homeId], map: "ServiceContracts_homeId_fkey")

  @@index([guestId], map: "ServiceContracts_guestsId_fkey")
  @@index([homeId], map: "ServiceContracts_homeId_fkey")
}
